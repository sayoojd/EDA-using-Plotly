{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8806290,"sourceType":"datasetVersion","datasetId":5296325}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-28T00:07:16.991513Z","iopub.execute_input":"2024-06-28T00:07:16.991927Z","iopub.status.idle":"2024-06-28T00:07:16.999264Z","shell.execute_reply.started":"2024-06-28T00:07:16.991897Z","shell.execute_reply":"2024-06-28T00:07:16.998130Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\ndf=pd.read_csv(\"/kaggle/input/salaries/salaries.csv\")","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:13:53.930415Z","iopub.execute_input":"2024-06-28T00:13:53.931208Z","iopub.status.idle":"2024-06-28T00:13:53.943156Z","shell.execute_reply.started":"2024-06-28T00:13:53.931152Z","shell.execute_reply":"2024-06-28T00:13:53.942072Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"df","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:17:15.224766Z","iopub.execute_input":"2024-06-28T00:17:15.225188Z","iopub.status.idle":"2024-06-28T00:17:15.234762Z","shell.execute_reply.started":"2024-06-28T00:17:15.225154Z","shell.execute_reply":"2024-06-28T00:17:15.233624Z"},"trusted":true},"execution_count":15,"outputs":[{"execution_count":15,"output_type":"execute_result","data":{"text/plain":"     Name  Salary  Age\n0    John   50000   34\n1   Sally  120000   45\n2  Alyssa   80000   27","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Salary</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>50000</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Sally</td>\n      <td>120000</td>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Alyssa</td>\n      <td>80000</td>\n      <td>27</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df['Salary']","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:15:46.503996Z","iopub.execute_input":"2024-06-28T00:15:46.504421Z","iopub.status.idle":"2024-06-28T00:15:46.511812Z","shell.execute_reply.started":"2024-06-28T00:15:46.504390Z","shell.execute_reply":"2024-06-28T00:15:46.510795Z"},"trusted":true},"execution_count":13,"outputs":[{"execution_count":13,"output_type":"execute_result","data":{"text/plain":"0     50000\n1    120000\n2     80000\nName: Salary, dtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df[['Salary','Name']]","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:18:06.818423Z","iopub.execute_input":"2024-06-28T00:18:06.818854Z","iopub.status.idle":"2024-06-28T00:18:06.835170Z","shell.execute_reply.started":"2024-06-28T00:18:06.818820Z","shell.execute_reply":"2024-06-28T00:18:06.834013Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"   Salary    Name\n0   50000    John\n1  120000   Sally\n2   80000  Alyssa","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Salary</th>\n      <th>Name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>50000</td>\n      <td>John</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>120000</td>\n      <td>Sally</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>80000</td>\n      <td>Alyssa</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df[['Salary','Name']].min()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:18:50.955516Z","iopub.execute_input":"2024-06-28T00:18:50.955969Z","iopub.status.idle":"2024-06-28T00:18:50.966614Z","shell.execute_reply.started":"2024-06-28T00:18:50.955902Z","shell.execute_reply":"2024-06-28T00:18:50.965413Z"},"trusted":true},"execution_count":18,"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"Salary     50000\nName      Alyssa\ndtype: object"},"metadata":{}}]},{"cell_type":"code","source":"df[['Salary']].min()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:19:32.984478Z","iopub.execute_input":"2024-06-28T00:19:32.985498Z","iopub.status.idle":"2024-06-28T00:19:32.994539Z","shell.execute_reply.started":"2024-06-28T00:19:32.985458Z","shell.execute_reply":"2024-06-28T00:19:32.993360Z"},"trusted":true},"execution_count":21,"outputs":[{"execution_count":21,"output_type":"execute_result","data":{"text/plain":"Salary    50000\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"df['Salary'].min()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:19:53.362259Z","iopub.execute_input":"2024-06-28T00:19:53.363690Z","iopub.status.idle":"2024-06-28T00:19:53.370276Z","shell.execute_reply.started":"2024-06-28T00:19:53.363644Z","shell.execute_reply":"2024-06-28T00:19:53.369229Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"50000"},"metadata":{}}]},{"cell_type":"code","source":"df[df['Age']>30]","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:23:42.031885Z","iopub.execute_input":"2024-06-28T00:23:42.032283Z","iopub.status.idle":"2024-06-28T00:23:42.045100Z","shell.execute_reply.started":"2024-06-28T00:23:42.032257Z","shell.execute_reply":"2024-06-28T00:23:42.044005Z"},"trusted":true},"execution_count":24,"outputs":[{"execution_count":24,"output_type":"execute_result","data":{"text/plain":"    Name  Salary  Age\n0   John   50000   34\n1  Sally  120000   45","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Name</th>\n      <th>Salary</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>John</td>\n      <td>50000</td>\n      <td>34</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Sally</td>\n      <td>120000</td>\n      <td>45</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"print(df['Age'].unique())","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:27:04.225632Z","iopub.execute_input":"2024-06-28T00:27:04.226009Z","iopub.status.idle":"2024-06-28T00:27:04.234479Z","shell.execute_reply.started":"2024-06-28T00:27:04.225976Z","shell.execute_reply":"2024-06-28T00:27:04.233103Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"[34 45 27]\n","output_type":"stream"}]},{"cell_type":"code","source":"print(df['Age'].nunique())","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:27:32.148763Z","iopub.execute_input":"2024-06-28T00:27:32.149171Z","iopub.status.idle":"2024-06-28T00:27:32.158606Z","shell.execute_reply.started":"2024-06-28T00:27:32.149140Z","shell.execute_reply":"2024-06-28T00:27:32.156502Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"3\n","output_type":"stream"}]},{"cell_type":"code","source":"df.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:28:43.171863Z","iopub.execute_input":"2024-06-28T00:28:43.172275Z","iopub.status.idle":"2024-06-28T00:28:43.179339Z","shell.execute_reply.started":"2024-06-28T00:28:43.172243Z","shell.execute_reply":"2024-06-28T00:28:43.178277Z"},"trusted":true},"execution_count":27,"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"Index(['Name', 'Salary', 'Age'], dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"df.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:30:36.119428Z","iopub.execute_input":"2024-06-28T00:30:36.119836Z","iopub.status.idle":"2024-06-28T00:30:36.130795Z","shell.execute_reply.started":"2024-06-28T00:30:36.119807Z","shell.execute_reply":"2024-06-28T00:30:36.129609Z"},"trusted":true},"execution_count":33,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 3 entries, 0 to 2\nData columns (total 3 columns):\n #   Column  Non-Null Count  Dtype \n---  ------  --------------  ----- \n 0   Name    3 non-null      object\n 1   Salary  3 non-null      int64 \n 2   Age     3 non-null      int64 \ndtypes: int64(2), object(1)\nmemory usage: 200.0+ bytes\n","output_type":"stream"}]},{"cell_type":"code","source":"df.describe()","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:31:25.930176Z","iopub.execute_input":"2024-06-28T00:31:25.930598Z","iopub.status.idle":"2024-06-28T00:31:25.949773Z","shell.execute_reply.started":"2024-06-28T00:31:25.930566Z","shell.execute_reply":"2024-06-28T00:31:25.948568Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"              Salary        Age\ncount       3.000000   3.000000\nmean    83333.333333  35.333333\nstd     35118.845843   9.073772\nmin     50000.000000  27.000000\n25%     65000.000000  30.500000\n50%     80000.000000  34.000000\n75%    100000.000000  39.500000\nmax    120000.000000  45.000000","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Salary</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.000000</td>\n      <td>3.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>83333.333333</td>\n      <td>35.333333</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>35118.845843</td>\n      <td>9.073772</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>50000.000000</td>\n      <td>27.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>65000.000000</td>\n      <td>30.500000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>80000.000000</td>\n      <td>34.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>100000.000000</td>\n      <td>39.500000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>120000.000000</td>\n      <td>45.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df.index","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:33:41.553060Z","iopub.execute_input":"2024-06-28T00:33:41.553454Z","iopub.status.idle":"2024-06-28T00:33:41.560438Z","shell.execute_reply.started":"2024-06-28T00:33:41.553421Z","shell.execute_reply":"2024-06-28T00:33:41.559273Z"},"trusted":true},"execution_count":38,"outputs":[{"execution_count":38,"output_type":"execute_result","data":{"text/plain":"RangeIndex(start=0, stop=3, step=1)"},"metadata":{}}]},{"cell_type":"code","source":"mat=np.arange(0,50).reshape(5,10)\n","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:35:55.538619Z","iopub.execute_input":"2024-06-28T00:35:55.539017Z","iopub.status.idle":"2024-06-28T00:35:55.544341Z","shell.execute_reply.started":"2024-06-28T00:35:55.538985Z","shell.execute_reply":"2024-06-28T00:35:55.543134Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"df1=pd.DataFrame(data=mat)","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:39:31.695079Z","iopub.execute_input":"2024-06-28T00:39:31.695487Z","iopub.status.idle":"2024-06-28T00:39:31.700628Z","shell.execute_reply.started":"2024-06-28T00:39:31.695455Z","shell.execute_reply":"2024-06-28T00:39:31.699463Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"df1","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:36:52.661360Z","iopub.execute_input":"2024-06-28T00:36:52.662913Z","iopub.status.idle":"2024-06-28T00:36:52.682890Z","shell.execute_reply.started":"2024-06-28T00:36:52.662854Z","shell.execute_reply":"2024-06-28T00:36:52.681576Z"},"trusted":true},"execution_count":41,"outputs":[{"execution_count":41,"output_type":"execute_result","data":{"text/plain":"    0   1   2   3   4   5   6   7   8   9\n0   0   1   2   3   4   5   6   7   8   9\n1  10  11  12  13  14  15  16  17  18  19\n2  20  21  22  23  24  25  26  27  28  29\n3  30  31  32  33  34  35  36  37  38  39\n4  40  41  42  43  44  45  46  47  48  49","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n      <th>1</th>\n      <th>2</th>\n      <th>3</th>\n      <th>4</th>\n      <th>5</th>\n      <th>6</th>\n      <th>7</th>\n      <th>8</th>\n      <th>9</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>2</td>\n      <td>3</td>\n      <td>4</td>\n      <td>5</td>\n      <td>6</td>\n      <td>7</td>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>10</td>\n      <td>11</td>\n      <td>12</td>\n      <td>13</td>\n      <td>14</td>\n      <td>15</td>\n      <td>16</td>\n      <td>17</td>\n      <td>18</td>\n      <td>19</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>20</td>\n      <td>21</td>\n      <td>22</td>\n      <td>23</td>\n      <td>24</td>\n      <td>25</td>\n      <td>26</td>\n      <td>27</td>\n      <td>28</td>\n      <td>29</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>30</td>\n      <td>31</td>\n      <td>32</td>\n      <td>33</td>\n      <td>34</td>\n      <td>35</td>\n      <td>36</td>\n      <td>37</td>\n      <td>38</td>\n      <td>39</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>40</td>\n      <td>41</td>\n      <td>42</td>\n      <td>43</td>\n      <td>44</td>\n      <td>45</td>\n      <td>46</td>\n      <td>47</td>\n      <td>48</td>\n      <td>49</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"mat2=np.arange(0,10).reshape(5,2)\ndf2=pd.DataFrame(data=mat2,columns=['A','B'])","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:42:25.646235Z","iopub.execute_input":"2024-06-28T00:42:25.647372Z","iopub.status.idle":"2024-06-28T00:42:25.653198Z","shell.execute_reply.started":"2024-06-28T00:42:25.647330Z","shell.execute_reply":"2024-06-28T00:42:25.651942Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"df2","metadata":{"execution":{"iopub.status.busy":"2024-06-28T00:42:30.855098Z","iopub.execute_input":"2024-06-28T00:42:30.855495Z","iopub.status.idle":"2024-06-28T00:42:30.865964Z","shell.execute_reply.started":"2024-06-28T00:42:30.855462Z","shell.execute_reply":"2024-06-28T00:42:30.864803Z"},"trusted":true},"execution_count":45,"outputs":[{"execution_count":45,"output_type":"execute_result","data":{"text/plain":"   A  B\n0  0  1\n1  2  3\n2  4  5\n3  6  7\n4  8  9","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>4</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>6</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>8</td>\n      <td>9</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]}]}
